const getCustomDate=(e,t)=>{if("string"!=typeof e)throw new Error("getCustomDate: first param must be a string format");if("number"!=typeof t)throw new Error("getCustomDate: second parameter of the function must be number");e=e.trim();let r=new Date(e),o=new Date(r.setDate(r.getDate()+t));o=o.toLocaleDateString();let[a,n,i]=o.split("/");return`${i}-${a}-${n}`},getCustomMonthDate=(e,t)=>{if("string"!=typeof e)throw new Error("Date Format must be a string format");if("number"!=typeof t)throw new Error("second parameter of the function must be number");e=e.trim();let r=new Date(e),o=new Date(r.setMonth(r.getMonth()+t));o=o.toLocaleDateString();let[a,n,i]=o.split("/");return`${i}-${a}-${n}`},isDateGreaterThanGivenFormat=(e,t,r="m",o=!1)=>{if("string"!=typeof e)throw new Error("isDateGreaterThanGivenFormat: must be a string format");if("number"!=typeof t)throw new Error("isDateGreaterThanGivenFormat: Second param must be number");if("string"!=typeof r)throw new Error("isDateGreaterThanGivenFormat: Thrid param must be string");if("m"!==r&&"d"!==r)throw new Error("third param is out of the scope. it must be either m or d");let a;if(o&&console.log(`given date is: ${e}`),"m"===r)a=getCustomMonthDate((new Date).toLocaleDateString(),t);else a=getCustomDate((new Date).toLocaleDateString(),t);return o&&console.log(`next/previous is: ${a}`),new Date(new Date(e).toLocaleDateString()).getTime()>=new Date(new Date(a).toLocaleDateString()).getTime()},getMonth=(e,t="N",r=!1)=>{let o=["N","E"],a={0:"January",1:"February",2:"March",3:"April",4:"May",5:"June",6:"July",7:"August",8:"September",9:"October",10:"November",11:"December"};if("string"!=typeof e)throw new Error("getMonth: first param must be string");if("string"!=typeof t)throw new Error("getMonth: second param must be string");if(r&&(console.log("allowed formats are : "),console.log(o),console.log(`Given format is: ${t}`)),-1===o.indexOf(t))throw new Error("getMonth: second param must have N or E value");let n=new Date(e).getMonth();return"N"===t?n+1:a[n]},isDateValid=(e,t=!1)=>{if("string"!=typeof e)throw new Error("isDateValid: given date format should be string");if(""===e.trim())throw new Error("isDateValid: given date cannot be empty");if(-1===[8,9,10].indexOf(e.length))return t&&console.log("given date format is exceeding length of 10 characters"),!1;if(e.split("-").length<3)return t&&console.log("given date format is exceeding length of 10 characters"),!1;let[r,o,a]=e.split("-");try{parseInt(r)}catch(e){return t&&console.log("isDateValid: year format is invalid"),!1}if("0000"===r||"0"===r[0]&&"0"===r[1])return t&&console.log("isDateValid: year format is invalid. Either of \n            first two digit cannot be zero"),!1;if(4!=r.length)return t&&console.log("isDateValid: date should be in Y-M-D format"),!1;try{o=parseInt(o)}catch(e){return t&&console.log("isDateValid: month format is invalid"),!1}if(o>12)return t&&console.log("isDateValid: there are only twelve months in one year"),!1;try{a=parseInt(a)}catch(e){return t&&console.log("isDateValid: day can only be in number/integer format"),!1}return 0==a?(t&&console.log("isDateValid: 00 is considered invalid day format"),!1):!(a.toString().length>2)||(t&&console.log("isDateValid: date should be in Y-M-D format"),!1)},dayFinder=e=>({0:"Sunday",1:"Monday",2:"Tuesday",3:"Wednesday",4:"Thrusday",5:"Friday",6:"Saturday"}[e]),getDay=e=>{if("string"!=typeof e)throw new Error("givenDate: given date is not in string format");try{return{0:"Sunday",1:"Monday",2:"Tuesday",3:"Wednesday",4:"Thrusday",5:"Friday",6:"Saturday"}[new Date(e).getDay()]}catch(e){console.error(`getDay: ${e}`)}},weekStartDate=(e,t=!1)=>{if("string"!=typeof e)throw new Error("given date is not in string format");let r=new Date(e).getDay();return 1!=r?getCustomDate(e,0===r?-6:-(r-1)):e},weekEndDate=(e,t=!1)=>{if("string"!=typeof e)throw new Error("given date is not in string format");let r=new Date(e).getDay();return 0!=r?getCustomDate(e,7-r):e};